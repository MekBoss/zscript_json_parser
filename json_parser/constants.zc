enum json_data_type
{
    JDT_NONE = 0,
    JDT_NUMBER = 1,
    JDT_STRING = 1 << 1,
    JDT_BOOL = 1 << 2,
    JDT_ARRAY = 1 << 3,
    JDT_UNKNOWN = 1 << 4,
    JDT_BOOL_FALSE = 1 << 5,
    JDT_BOOL_TRUE = 1 << 6,
    JDT_NESTED_OBJECT = 1 << 7
};


enum EASCIICodes
{
    ASCII_NUL, // null
    ASCII_SOH, // start of heading
    ASCII_STX, // start of text
    ASCII_ETX, // end of text
    ASCII_EOT, // end of transmission
    ASCII_ENQ, // enquiry
    ASCII_ACK, // acknowledge
    ASCII_BEL, // bell
    ASCII_BS,  // backspace
    ASCII_TAB, // horizontal tab
    ASCII_LF,  // line feed
    ASCII_VT,  // vertical tab
    ASCII_FF,  // form feed
    ASCII_CR,  // carriage return
    ASCII_SO,  // shift out
    ASCII_SI,  // shift in
    ASCII_DLE, // data link escape
    ASCII_DC1, // device control 1
    ASCII_DC2, // device control 2
    ASCII_DC3, // device control 3
    ASCII_DC4, // device control 4
    ASCII_NAK, // negative acknowledge
    ASCII_SYN, // synchronous idle
    ASCII_ETB, // end of transmission block
    ASCII_CAN, // cancel
    ASCII_EM,  // end medium
    ASCII_SUB, // substitute
    ASCII_ESC, // escape
    ASCII_FS,  // file separator
    ASCII_GS,  // group separator
    ASCII_RS,  // record separator
    ASCII_US,  // unit separator

    ASCII_Space,       // ' '
    ASCII_Bang,        // !
    ASCII_DblQuote,    // "
    ASCII_Hash,        // #
    ASCII_Dollar,      // $
    ASCII_Percent,     // %
    ASCII_And,         // &
    ASCII_Quote,       // '
    ASCII_ParenO,      // (
    ASCII_ParenC,      // )
    ASCII_Asterisk,    // *
    ASCII_Plus,        // +
    ASCII_Comma,       // ,
    ASCII_Minus,       // -
    ASCII_Period,      // .
    ASCII_Slash,       // /
    ASCII_0,           // 0
    ASCII_1,           // 1
    ASCII_2,           // 2
    ASCII_3,           // 3
    ASCII_4,           // 4
    ASCII_5,           // 5
    ASCII_6,           // 6
    ASCII_7,           // 7
    ASCII_8,           // 8
    ASCII_9,           // 9
    ASCII_Colon,       // :
    ASCII_Semicolon,   // ;
    ASCII_LessThan,    // <
    ASCII_Equals,      // =
    ASCII_MoreThan,    // >
    ASCII_Question,    // ?
    ASCII_At,          // @
    ASCII_A,           // A
    ASCII_B,           // B
    ASCII_C,           // C
    ASCII_D,           // D
    ASCII_E,           // E
    ASCII_F,           // F
    ASCII_G,           // G
    ASCII_H,           // H
    ASCII_I,           // I
    ASCII_J,           // J
    ASCII_K,           // K
    ASCII_L,           // L
    ASCII_M,           // M
    ASCII_N,           // N
    ASCII_O,           // O
    ASCII_P,           // P
    ASCII_Q,           // Q
    ASCII_R,           // R
    ASCII_S,           // S
    ASCII_T,           // T
    ASCII_U,           // U
    ASCII_V,           // V
    ASCII_W,           // W
    ASCII_X,           // X
    ASCII_Y,           // Y
    ASCII_Z,           // Z
    ASCII_BrackO,      // [
    ASCII_Backslash,   // \
    ASCII_BrackC,      // ]
    ASCII_Exponent,    // ^
    ASCII_Underscore,  // _
    ASCII_Backquote,   // `
    ASCII_Lower_A,     // a
    ASCII_Lower_B,     // b
    ASCII_Lower_C,     // c
    ASCII_Lower_D,     // d
    ASCII_Lower_E,     // e
    ASCII_Lower_F,     // f
    ASCII_Lower_G,     // g
    ASCII_Lower_H,     // h
    ASCII_Lower_I,     // i
    ASCII_Lower_J,     // j
    ASCII_Lower_K,     // k
    ASCII_Lower_L,     // l
    ASCII_Lower_M,     // m
    ASCII_Lower_N,     // n
    ASCII_Lower_O,     // o
    ASCII_Lower_P,     // p
    ASCII_Lower_Q,     // q
    ASCII_Lower_R,     // r
    ASCII_Lower_S,     // s
    ASCII_Lower_T,     // t
    ASCII_Lower_U,     // u
    ASCII_Lower_V,     // v
    ASCII_Lower_W,     // w
    ASCII_Lower_X,     // x
    ASCII_Lower_Y,     // y
    ASCII_Lower_Z,     // z
    ASCII_BraceO,      // {
    ASCII_VerticalBar, // |
    ASCII_BraceC,      // }
    ASCII_Tilde,       // ~
    ASCII_DEL,         // DEL
};

enum seek_for_flags
{
    SFF_NONE,
    SFF_SEQUENCE_END = 1,//seek until hit space and/or specific symbol
    SFF_IGNORE_NON_PRINTABLE = 1<<1,//ignore all non characters (include space)
    SFF_STOP_ON_NOT_MATCHING = 1<<2,//stop seeking on symbol if it not matchs
    SFF_SERIES_END = 1<<3//break on first character not defined in char array
};

enum error_types
{
    ETF_NONE,
    ETF_ARRAY,
    ETF_CURVED_BRACKET
};